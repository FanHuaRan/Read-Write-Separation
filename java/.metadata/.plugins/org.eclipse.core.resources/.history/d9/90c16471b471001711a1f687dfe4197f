package com.fhr.osmonitor.components;

import java.util.Properties;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.fhr.osmonitor.utils.PropertiesUtils;
import com.fhr.osmonitor.utils.ResourceUtils;

/**
 * 监听配置对象
 * @author fhr
 * @date 2017/07/26
 */
public class MonitorConfig {
	private static final Logger logger=Logger.getLogger(MonitorConfig.class);
	
	//监听间隔 以秒为单位 缺省为1s
	public static final int MONIT_INTERVAL;
	
	//端口 缺省为14080
	public static final int MONIT_SOCKET_PORT;
	
	// 内存占用率警告限度  缺省90%
	public static final double MEMORY_WARING_RATE;
	
	// 内存占用率严重限度 缺省95%
	public static final double MEMORY_SERIOUS_RATE;
	
    // cpu占用率警告限度 缺省90%
	public static final double CPU_WARING_RATE;
	
	// cpu占用率严重限度 缺省95%
	public static final double CPU_SERIOUS_RATE;
	
	//初始化常量值
	static {
		int interval = 1;
		int port = 14080;
		double memWarn=0.9d;
		double memSer=0.95d;
		double cpuWarn=0.9d;
		double cpuSer=0.95d;
		try {
			Properties properties = PropertiesUtils.getPropertiesObj(ResourceUtils.getAbsoluteFileName("/monitorconfig.properties"));
			String intervalStr = PropertiesUtils.getProperty(properties, "monit.interval");
			if (StringUtils.isNotEmpty(intervalStr) && StringUtils.isNumeric(intervalStr)) {
				interval = Integer.valueOf(intervalStr);
			}
			String sokertPortStr = PropertiesUtils.getProperty(properties, "monit.socketport");
			if (StringUtils.isNotEmpty(sokertPortStr) && StringUtils.isNumeric(sokertPortStr)) {
				port = Integer.valueOf(sokertPortStr);
			}
			String memWarn = PropertiesUtils.getProperty(properties, "monit.socketport");
			if (StringUtils.isNotEmpty(sokertPort) && StringUtils.isNumeric(sokertPort)) {
				memWarn = Integer.valueOf(monitorInterval);
			}String memSer = PropertiesUtils.getProperty(properties, "monit.socketport");
			if (StringUtils.isNotEmpty(sokertPort) && StringUtils.isNumeric(sokertPort)) {
				memSer = Integer.valueOf(monitorInterval);
			}String cpuWarn = PropertiesUtils.getProperty(properties, "monit.socketport");
			if (StringUtils.isNotEmpty(sokertPort) && StringUtils.isNumeric(sokertPort)) {
				cpuWarn = Integer.valueOf(monitorInterval);
			}String cpuSer = PropertiesUtils.getProperty(properties, "monit.socketport");
			if (StringUtils.isNotEmpty(sokertPort) && StringUtils.isNumeric(sokertPort)) {
				cpuSer = Integer.valueOf(monitorInterval);
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("配置文件读取错误", e);
		}
		MONIT_INTERVAL = interval;
		MONIT_SOCKET_PORT = port;
		MEMORY_WARING_RATE=memWarn;
		MEMORY_SERIOUS_RATE=memSer;
		CPU_WARING_RATE=cpuWarn;
		CPU_SERIOUS_RATE=cpuSer;
	}
}
