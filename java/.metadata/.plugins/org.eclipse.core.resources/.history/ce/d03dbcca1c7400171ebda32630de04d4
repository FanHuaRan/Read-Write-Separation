package com.fhr.readwritedemo.services.impl;

import javax.sql.DataSource;

import com.fhr.readwritedemo.models.DataBaseInfo;
import com.fhr.readwritedemo.models.DataBaseType;
import com.fhr.readwritedemo.services.ICreateDataSource;
import com.mchange.v2.c3p0.ComboPooledDataSource;

/**
 * 数据源创建实现
 * @author fhr
 * @date 2017/07/29
 */
public class CreateDataSourceImpl implements ICreateDataSource {
	// 连接池最大连接数
	private static final int MAX_POOL_SIZE = 50;
	// 连接池初始连接数
	private static final int INITIAL_POOL_SIZE = 2;
	// 连接池最小连接数
	private static final int MIN_POOL_SIZE = 1;
	// 每个连接的最大Statements数
	private static final int MAX_Statements = 50;
	// 连接池的最大空闲连接
	private static final int MAX_IDLE_TIME = 60;
	// SQLSERVER驱动名称
	private static final String SQLSERVER_DRIVER="com.microsoft.sqlserver.jdbc.SQLServerDriver";
	// MySQL
	private static final String MYSQL_DRIVER="com.mysql.jdbc.Driver";
	// Oracle
	private static final String ORACLE_DRIVER="oracle.jdbc.driver.OracleDriver";
	@Override
	public DataSource createDataSource(DataBaseInfo dataBaseInfo) {

		return null;
	}
	
	public String getDriverClass(DataBaseType dataBaseType,String url){
		switch (dataBaseType) {
		case DataBaseType:
			
			break;

		default:
			break;
		}
		
	}	
	public static String getJdbcUrl(DataBaseType dataBaseType,String url){
		/*essentialInfo = new DbEssentialInfo("com.microsoft.sqlserver.jdbc.SQLServerDriver", DatabaseType.MSSql,
				String.format("jdbc:sqlserver://%s;DatabaseName=%s", dbHost, dbName));
		essentialInfo = new DbEssentialInfo("oracle.jdbc.driver.OracleDriver", DatabaseType.Oracle,
				String.format("jdbc:oracle:thin:@%s:1521:%s", dbHost, dbName));
		essentialInfo = new DbEssentialInfo("com.mysql.jdbc.Driver", DatabaseType.Mysql,
				String.format("jdbc:mysql://%s/%s;useUnicode=true&characterEncoding=8859_1", dbHost, dbName));*/
		return null;
	}
	
	private DataSource createDataSource(String driverClass, String url, String userName, String password) {
		ComboPooledDataSource dataSource = new ComboPooledDataSource();
		try {
			dataSource.setDriverClass(driverClass);
		} catch (Exception e) {
		}
		dataSource.setJdbcUrl(url);
		dataSource.setUser(userName);
		dataSource.setPassword(password);
		dataSource.setMaxPoolSize(MAX_POOL_SIZE);
		dataSource.setInitialPoolSize(INITIAL_POOL_SIZE);
		dataSource.setMinPoolSize(MIN_POOL_SIZE);
		dataSource.setMaxStatements(MAX_Statements);
		dataSource.setMaxIdleTime(MAX_IDLE_TIME);
		return dataSource;
	}
}
