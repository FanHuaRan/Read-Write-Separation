package ebs.db.utils;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mysql.jdbc.Statement;

import ebs.sys.SysEnv;

/**
 * jdbc封装工具类， 
 * 注意：这儿只针对于ebs_kernel使用 
 * 后面肯定要修改  connection应该从外部传入，或者传入获取connection的参数
 * @author fhr
 * @date 2017/05/23
 */
public class JdbcUtil {
	/**
	 * 获取连接对象
	 * @return
	 * @throws SQLException
	 */
	private static Connection getConnection() throws SQLException {
		return SysEnv.getDbConnection("ebs_kernel");
	}

	/**
	 * 插入记录 返回主键
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	public static Object insertRecord(String sql, List<Object> params) throws SQLException {
		try (Connection connection = getConnection();
			 PreparedStatement pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);) {
			if (params != null && !params.isEmpty()) {
				for (int i = 0; i < params.size(); i++) {
					pstmt.setObject(i + 1, params.get(i));
				}
			}
			pstmt.execute();
			try (ResultSet resultSet = pstmt.getGeneratedKeys()) {
				Object key = null;
				if (resultSet.next()) {
					key = resultSet.getObject(1);
				}
				return key;
			}
		}
	}

	/**
	 * 执行sql语句，返回影响行数
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	public static int executeSQL(String sql, List<Object> params) throws SQLException {
		try(Connection connection = getConnection();
			PreparedStatement	pstmt = createNormalPreparedStatement(sql, params, connection);) {
			int count = pstmt.executeUpdate();
			return count;
		}
	}
	
	/**
	 * 更新数据库记录，有记录被影响则返回true
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	public static boolean update(String sql, List<Object> params) throws SQLException {
		int result = executeSQL(sql, params);
		boolean flag = result > 0 ? true : false;
		return flag;
	}

	/**
	 * 查找单个记录
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	public static Map<String, Object> findSingleResultByMap(String sql, List<Object> params) throws SQLException {
		try(Connection connection = getConnection();
			PreparedStatement	pstmt = createNormalPreparedStatement(sql, params, connection);
			ResultSet	resultSet = pstmt.executeQuery()) {
			Map<String, Object> map = null;
			ResultSetMetaData metaData = resultSet.getMetaData();
			int col_len = metaData.getColumnCount();
			while (resultSet.next()) {
				map = getSingleHashMap(resultSet, metaData, col_len);
			}
			return map;
		}
	}

	/**
	 * 查找多个记录
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	public static List<Map<String, Object>> findMoreResultByMap(String sql, List<Object> params) throws SQLException {
		try(Connection connection = getConnection();
			PreparedStatement	pstmt = createNormalPreparedStatement(sql, params, connection);
			ResultSet	resultSet = pstmt.executeQuery()) {
			ResultSetMetaData metaData = resultSet.getMetaData();
			int cols_len = metaData.getColumnCount();
			List<Map<String, Object>> list = new ArrayList<>();
			while (resultSet.next()) {
				list.add(getSingleHashMap(resultSet, metaData, cols_len));
			}
			return list;
		} 
	}

	/**
	 * 通过map更新记录
	 * @param tableName
	 * @param rowValues
	 * @param primaryKey
	 * @param id
	 * @return
	 * @throws SQLException
	 */
	public static boolean updateRecordByMap(String tableName, Map<String, Object> rowValues, String primaryKey, int id)
			throws SQLException {
		Object[] keys = rowValues.keySet().toArray();
		String sql = createMapUpdateSql(tableName, primaryKey, keys);
		try(Connection connection=getConnection();
			PreparedStatement	pstmt = connection.prepareStatement(sql)) {
			for (int i = 0; i < keys.length; i++) {
				pstmt.setObject(i + 1, rowValues.get(keys[i]));
			}
			pstmt.setObject(keys.length + 1, id);
			int resultCount = pstmt.executeUpdate();
			return resultCount > 0 ? true : false;
		} 
	}

	/**
	 * 通过map插入记录
	 * @param tableName
	 * @param rowValues
	 * @return
	 * @throws SQLException
	 */
	public static boolean insertRecordByMap(String tableName, Map<String, Object> rowValues) throws SQLException {
		Object[] keys = rowValues.keySet().toArray();
		String sql = createMapInsertSql(tableName, keys);
		try(Connection connection = getConnection();
			PreparedStatement	pstmt = connection.prepareStatement(sql)) {
			for (int i = 0; i < rowValues.size(); i++) {
				pstmt.setObject(i + 1, rowValues.get(keys[i]));
			}
			int resultCount = pstmt.executeUpdate();
			return resultCount > 0 ? true : false;
		}
	}

	/**
	 * 删除记录
	 * @param tableName
	 * @param primaryKey
	 * @param id
	 * @return
	 * @throws SQLException
	 */
	public static boolean deleteRecord(String tableName, String primaryKey, int id) throws SQLException {
		String sql = createNormalDeleteSql(tableName, primaryKey);
		try(Connection connection = getConnection();
			PreparedStatement pstmt = connection.prepareStatement(sql)) {
			pstmt.setObject(1, id);
			int resultCount = pstmt.executeUpdate();
			return resultCount > 0 ? true : false;
		}
	}

	/**
	 * 通过反射查找单个记录
	 * @param sql
	 * @param params
	 * @param cls
	 * @return
	 * @throws Exception
	 */
	public static <T> T findSingleResultByObject(String sql, List<Object> params, Class<T> cls) throws Exception {
		try(Connection connection = getConnection();
			PreparedStatement pstmt = createNormalPreparedStatement(sql, params, connection);
			ResultSet resultSet = pstmt.executeQuery()) {
			T resultObject = null;
			ResultSetMetaData metaData = resultSet.getMetaData();
			int cols_len = metaData.getColumnCount();
			while (resultSet.next()) {
				resultObject = getSingleObject(cls, resultSet, metaData, cols_len);
			}
			return resultObject;
		}
	}

	/**
	 * 通过反射查找多个记录
	 * @param sql
	 * @param params
	 * @param cls
	 * @return
	 * @throws Exception
	 */
	public static <T> List<T> findMoreResultByObject(String sql, List<Object> params, Class<T> cls) throws Exception {
		try(Connection 	connection = getConnection();
			PreparedStatement pstmt = createNormalPreparedStatement(sql, params, connection);
			ResultSet resultSet = pstmt.executeQuery()){
			List<T> list = new ArrayList<>();
			ResultSetMetaData metaData = resultSet.getMetaData();
			int cols_len = metaData.getColumnCount();
			while (resultSet.next()) {
				list.add(getSingleObject(cls, resultSet, metaData, cols_len));
			}
			return list;
		} 
	}

	/**
	 * 通过反射更新记录
	 * @param object
	 * @param primaryKeyName
	 * @return
	 * @throws IllegalArgumentException
	 * @throws IllegalAccessException
	 * @throws SQLException
	 * @throws NoSuchFieldException
	 * @throws SecurityException
	 */
	@SuppressWarnings("unchecked")
	public static <T> boolean updateRecordByObject(T object, String primaryKeyName) throws IllegalArgumentException,
			IllegalAccessException, SQLException, NoSuchFieldException, SecurityException {
		Class<T> cls = (Class<T>) object.getClass();
		Field[] fileds = cls.getDeclaredFields();
		Field primaryField = cls.getField(primaryKeyName);
		String sql = createObjectUpdateSql(primaryKeyName, cls, fileds);
		try (Connection connection = getConnection(); 
				PreparedStatement pstmt = connection.prepareStatement(sql)) {
			for (int i = 0; i < fileds.length; i++) {
				pstmt.setObject(i + 1, fileds[i].get(object));
			}
			pstmt.setObject(fileds.length + 1, primaryField.get(object));
			int resultCount = pstmt.executeUpdate();
			return resultCount > 0 ? true : false;
		} 
	}

	/**
	 * 通过反射插入记录
	 * @param object
	 * @return
	 * @throws IllegalArgumentException
	 * @throws IllegalAccessException
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public static <T> boolean insertRecordByObject(T object)
			throws IllegalArgumentException, IllegalAccessException, SQLException {
		Class<T> cls = (Class<T>) object.getClass();
		Field[] fileds = cls.getDeclaredFields();
		String sql = createObjectInsertSql(object, fileds);
		try (Connection connection = getConnection(); 
			PreparedStatement pstmt = connection.prepareStatement(sql)) {
			for (int i = 0; i < fileds.length; i++) {
				pstmt.setObject(i + 1, fileds[i].get(object));
			}
			int resultCount = pstmt.executeUpdate();
			return resultCount > 0 ? true : false;
		}
	}

	/***************************** 私有方法 *******************************/
	
	/**
	 * 根据对象创建insert sql语句
	 * @param object
	 * @param fileds
	 * @return
	 */
	private static <T> String createObjectInsertSql(T object, Field[] fileds) {
		StringBuilder builder = new StringBuilder("insert into  " + object.getClass().getSimpleName() + "(");
		StringBuilder valueBuilder = new StringBuilder("(");
		for (int i = 0; i < fileds.length; i++) {
			Field filed = fileds[i];
			String collumName = filed.getName();
			if (i != fileds.length - 1) {
				builder.append(collumName + ",");
				valueBuilder.append("?,");
			} else {
				builder.append(collumName + ") values ");
				valueBuilder.append("?)");
			}
		}
		builder.append(valueBuilder);
		return builder.toString();
	}

	/**
	 * 根据sql和参数数组创建PreparedStatement
	 * @param sql
	 * @param params
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	private static PreparedStatement createNormalPreparedStatement(String sql, List<Object> params,
			Connection connection) throws SQLException {
		PreparedStatement pstmt = connection.prepareStatement(sql);
		if (params != null && !params.isEmpty()) {
			for (int i = 0; i < params.size(); i++) {
				pstmt.setObject(i + 1, params.get(i));
			}
		}
		return pstmt;
	}

	/**
	 * 根据keys创建insert sql语句
	 * @param tableName
	 * @param keys
	 * @return
	 */
	private static String createMapInsertSql(String tableName, Object[] keys) {
		StringBuilder builder = new StringBuilder();
		builder.append("insert  into " + tableName + " ( ");
		StringBuilder valueBuilder = new StringBuilder("(");
		for (int i = 0; i < keys.length; i++) {
			if (i != keys.length - 1) {
				builder.append(keys[i] + ",");
				valueBuilder.append("?,");
			} else {
				builder.append(keys[i] + ") values ");
				valueBuilder.append("?)");
			}
		}
		builder.append(valueBuilder);
		String sql = builder.toString();
		return sql;
	}

	/**
	 * 根据tablename、主键字段名和keys创建修改 sql
	 * @param tableName
	 * @param primaryKey
	 * @param keys
	 * @return
	 */
	private static String createMapUpdateSql(String tableName, String primaryKey, Object[] keys) {
		StringBuilder builder = new StringBuilder();
		builder.append("update  " + tableName + " set ");
		for (int i = 0; i < keys.length; i++) {
			builder.append(keys[i] + "=?");
			if (i != keys.length - 1) {
				builder.append(",");
			}
		}
		builder.append(" where " + primaryKey + "=?");
		String sql = builder.toString();
		return sql;
	}

	/**
	 * 创建删除sql
	 * @param tableName
	 * @param primaryKey
	 * @return
	 */
	private static String createNormalDeleteSql(String tableName, String primaryKey) {
		StringBuilder builder = new StringBuilder("delete from " + tableName + " ");
		builder.append(" where " + primaryKey + "=?");
		String sql = builder.toString();
		return sql;
	}

	/**
	 * 根据对象创建修改sql
	 * @param primaryKeyName
	 * @param cls
	 * @param fileds
	 * @return
	 */
	private static <T> String createObjectUpdateSql(String primaryKeyName, Class<T> cls, Field[] fileds) {
		StringBuilder builder = new StringBuilder("update " + cls.getSimpleName() + " set ");
		for (int i = 0; i < fileds.length; i++) {
			Field filed = fileds[i];
			String name = filed.getName();
			builder.append(name + "=?");
			if (i != fileds.length - 1) {
				builder.append(",");
			}
		}
		builder.append(" where " + primaryKeyName + "=?");
		return builder.toString();
	}

	/**
	 * 获取一个map 也就是一行
	 * @param resultSet
	 * @param metaData
	 * @param col_len
	 * @return
	 * @throws SQLException
	 */
	private static Map<String, Object> getSingleHashMap(ResultSet resultSet, ResultSetMetaData metaData, int col_len)
			throws SQLException {
		Map<String, Object> map = new HashMap<>();
		for (int i = 0; i < col_len; i++) {
			String cols_name = metaData.getColumnName(i + 1);
			Object cols_value = resultSet.getObject(cols_name);
			map.put(cols_name, cols_value);
		}
		return map;
	}

	/**
	 * 应用反射创建一个对象 一行
	 * 
	 * @param cls
	 * @param resultSet
	 * @param metaData
	 * @param cols_len
	 * @return
	 * @throws InstantiationException
	 * @throws IllegalAccessException
	 * @throws SQLException
	 * @throws NoSuchFieldException
	 */
	private static <T> T getSingleObject(Class<T> cls, ResultSet resultSet, ResultSetMetaData metaData, int cols_len)
			throws InstantiationException, IllegalAccessException, SQLException, NoSuchFieldException {
		T resultObject = cls.newInstance();
		for (int i = 0; i < cols_len; i++) {
			String cols_name = metaData.getColumnName(i + 1);
			Object cols_value = resultSet.getObject(cols_name);
			Field field = cls.getDeclaredField(cols_name);
			field.setAccessible(true);
			field.set(resultObject, cols_value);
		}
		return resultObject;
	}
	/**
	 * 释放资源
	 * @param resources
	 */
	private static void relaseResources(AutoCloseable ...resources) {
		for(AutoCloseable resource :resources){
			try {
				if (resource != null) {
					resource.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}
