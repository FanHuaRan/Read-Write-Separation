package com.fhr.readwritedemo.core.services.impl;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import com.fhr.readwritedemo.core.services.IConnectionGetService;
import com.fhr.readwritedemo.core.services.ICustomJdbcOperations;
import com.fhr.readwritedemo.utils.JdbcTool;

/**
 * 读写分离的jdbctemplate的实现
 * @author fhr
 * @date
 */
public class ReadWriteJdbcTemplate implements ICustomJdbcOperations {

	@Autowired
	private IConnectionGetService connectionGetService = null;

	@Override
	public Object insertOrUpdateRecordByMap(String tableName, Map<String, Object> fields, String pkName, Object id)
			throws SQLException {
		try (Connection connection = connectionGetService.getWriteConnection()) {
			return JdbcTool.insertOrUpdateRecordByMap(connection, tableName, fields, pkName, id);
		}
	}

	@Override
	public Object insertRecord(String sql, List<Object> params) throws SQLException {
		try (Connection connection = connectionGetService.getWriteConnection()) {
			return JdbcTool.insertRecord(connection, sql, params);
		}
	}

	@Override
	public boolean updateRecordByMap(String tableName, Map<String, Object> fields, String pkName, Object id)
			throws SQLException {
		try (Connection connection = connectionGetService.getWriteConnection()) {
			return JdbcTool.updateRecordByMap(connection, tableName, fields, pkName, id);
		}
	}

	@Override
	public Object insertRecordByMap(String tableName, Map<String, Object> fields) throws SQLException {
		try (Connection connection = connectionGetService.getWriteConnection()) {
			return JdbcTool.insertRecordByMap(connection, tableName, fields);
		}
	}

	@Override
	public boolean recordExist(String tableName, String pkName, Object id) throws SQLException {
		try (Connection connection = connectionGetService.getReadConnection()) {
			return JdbcTool.recordExist(connection, tableName, pkName, id);
		}
	}

	@Override
	public boolean tableExist(String tableName) throws SQLException {
		try (Connection connection = connectionGetService.getReadConnection()) {
			return JdbcTool.tableExist(connection, tableName);
		}	}

	@Override
	public int[] executeBatchWithTran(List<String> sqls) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return null;
	}

	@Override
	public int[] executeBatch(List<String> sqls) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return null;
	}

	@Override
	public boolean executeSQL(String sql, List<Object> params) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return false;
	}

	@Override
	public boolean executeSQL(String sql) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return false;
	}

	@Override
	public void executeSQLS(List<String> sqls) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}

	}

	@Override
	public Map<String, Object> findSingleResultByMap(String sql, List<Object> params) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return null;
	}

	@Override
	public List<Map<String, Object>> findMoreResultByMap(String sql, List<Object> params) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return null;
	}

	@Override
	public boolean deleteRecord(String tableName, String primaryKey, int id) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return false;
	}

	@Override
	public String getPrimaryKeyName(String tableName) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return null;
	}

	@Override
	public int getMaxPkId(String tableName, String pkName) throws SQLException {
		try (Connection connection = connectionGetService.getConnection()) {

		}
		return 0;
	}

}
